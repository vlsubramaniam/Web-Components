/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface StockFinder {
    }
    interface StockPrice {
        "stockSymbol": string;
    }
    interface UcSpinner {
    }
}
declare global {
    interface HTMLStockFinderElement extends Components.StockFinder, HTMLStencilElement {
    }
    var HTMLStockFinderElement: {
        prototype: HTMLStockFinderElement;
        new (): HTMLStockFinderElement;
    };
    interface HTMLStockPriceElement extends Components.StockPrice, HTMLStencilElement {
    }
    var HTMLStockPriceElement: {
        prototype: HTMLStockPriceElement;
        new (): HTMLStockPriceElement;
    };
    interface HTMLUcSpinnerElement extends Components.UcSpinner, HTMLStencilElement {
    }
    var HTMLUcSpinnerElement: {
        prototype: HTMLUcSpinnerElement;
        new (): HTMLUcSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "stock-finder": HTMLStockFinderElement;
        "stock-price": HTMLStockPriceElement;
        "uc-spinner": HTMLUcSpinnerElement;
    }
}
declare namespace LocalJSX {
    interface StockFinder {
        "onSymbolSelected"?: (event: CustomEvent<String>) => void;
    }
    interface StockPrice {
        "stockSymbol"?: string;
    }
    interface UcSpinner {
    }
    interface IntrinsicElements {
        "stock-finder": StockFinder;
        "stock-price": StockPrice;
        "uc-spinner": UcSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "stock-finder": LocalJSX.StockFinder & JSXBase.HTMLAttributes<HTMLStockFinderElement>;
            "stock-price": LocalJSX.StockPrice & JSXBase.HTMLAttributes<HTMLStockPriceElement>;
            "uc-spinner": LocalJSX.UcSpinner & JSXBase.HTMLAttributes<HTMLUcSpinnerElement>;
        }
    }
}
